from datetime import datetime

# Define ciphers for buyers and owners
buyers_cipher = {
    'A': (65, 38), 'B': (10, 89), 'C': (76, 3), 'D': (80, 41), 'E': (17, 97),
    'F': (81, 64), 'G': (27, 7), 'H': (45, 98), 'I': (86, 50), 'J': (1, 30),
    'K': (97, 85), 'L': (40, 19), 'M': (84, 65), 'N': (23, 54), 'O': (77, 51),
    'P': (55, 24), 'Q': (33, 58), 'R': (82, 63), 'S': (5, 49), 'T': (93, 36),
    'U': (62, 95), 'V': (60, 20), 'W': (57, 67), 'X': (73, 56), 'Y': (9, 69),
    'Z': (35, 44)
}

owners_cipher = {
    'A': (81, 18), 'B': (46, 53), 'C': (72, 75), 'D': (12, 37), 'E': (90, 6),
    'F': (70, 87), 'G': (31, 32), 'H': (52, 74), 'I': (11, 16), 'J': (85, 47),
    'K': (63, 91), 'L': (28, 66), 'M': (96, 43), 'N': (2, 8), 'O': (42, 92),
    'P': (78, 59), 'Q': (21, 62), 'R': (99, 25), 'S': (51, 34), 'T': (39, 72),
    'U': (28, 13), 'V': (26, 79), 'W': (83, 4), 'X': (29, 68), 'Y': (60, 48),
    'Z': (14, 94)
}

def calculate_date_code(purchase_date_str):
    start_date = datetime(2024, 8, 24)
    purchase_date = datetime.strptime(purchase_date_str, "%Y-%m-%d")
    date_difference = (purchase_date - start_date).days
    start_counter = 8240
    date_code = start_counter - date_difference
    return date_code

def map_date_code_to_grid(date_code):
    date_code_str = str(date_code).zfill(4)
    return {
        'I2': date_code_str[0],
        'H3': date_code_str[1],
        'E1': date_code_str[2],
        'C1': date_code_str[3]
    }

def map_sales_counter_to_grid(sales_counter):
    sales_counter_str = str(sales_counter).zfill(9)
    return {
        'I1': sales_counter_str[0],
        'G2': sales_counter_str[1],
        'D1': sales_counter_str[2],
        'B3': sales_counter_str[3],
        'B1': sales_counter_str[4],
        'D3': sales_counter_str[5],
        'H2': sales_counter_str[6],
        'A3': sales_counter_str[7],
        'A1': sales_counter_str[8]
    }

def map_name_to_grid(name, cipher, name_positions):
    grid_mapping = {}
    first_name, last_name = name.split()
    first_initial = first_name[0].upper()
    last_initial = last_name[0].upper()
    
    # Get the cipher values for the initials
    first_initial_values = cipher[first_initial]
    last_initial_values = cipher[last_initial]
    
    # Map these values to the specified grid positions
    for pos, value in zip(name_positions['first'], first_initial_values):
        grid_mapping[pos] = str(value)
    for pos, value in zip(name_positions['last'], last_initial_values):
        grid_mapping[pos] = str(value)
    
    return grid_mapping

def assemble_serial_number(purchase_date, sales_counter, buyer_name, owner_name):
    date_code = calculate_date_code(purchase_date)
    date_code_mapping = map_date_code_to_grid(date_code)
    sales_counter_mapping = map_sales_counter_to_grid(sales_counter)
    
    # Define positions for buyers and owners
    buyers_positions = {
        'first': ['H1', 'G3'],
        'last': ['G1', 'C2']
    }
    owners_positions = {
        'first': ['C3', 'I3'],
        'last': ['B2', 'A2']
    }
    
    # Map names to grid
    buyer_mapping = map_name_to_grid(buyer_name, buyers_cipher, buyers_positions)
    owner_mapping = map_name_to_grid(owner_name, owners_cipher, owners_positions)
    
    # Combine all mappings
    serial_number_grid = {
        **date_code_mapping,
        **sales_counter_mapping,
        **buyer_mapping,
        **owner_mapping
    }
    
    return serial_number_grid

# Example usage
purchase_date = "2024-08-25"
sales_counter = 177402716
buyer_name = "John Doe"
owner_name = "Jane Smith"

serial_number = assemble_serial_number(purchase_date, sales_counter, buyer_name, owner_name)
print(serial_number)
